%{
#include <iostream>
#include <string>
#include <map>
#include "src/variables.hpp"
#include "src/statement.hpp"
#include "src/colors.hpp"

extern FILE* yyout;
extern FILE* yyin;
char* output_name;

void yyerror(std::string message) {
    std::cerr << message << std::endl;
    exit(EXIT_FAILURE);
}

extern int yylex();

extern int line_counter;    /* Extern counter for lines in original file, used for reporting errors, declared in lexer */

/* Extern global variables used for storing text lines, declared in lexer */
extern int text_line_counter;
extern int line_characters_counter;
extern std::vector<std::string> file_text;
extern std::map<int, int> added;

/* Extern global variables used for if text line buffer, declared in lexer */
extern int buffer_text_line_counter;
extern int buffer_line_characters_counter;
extern std::vector<std::string> buffer_file_text;
extern std::map<int, int> added_if;

extern bool active;      /* This flag tells if lines should be inserted in if buffer or in regular text buffer. It is declared in lexer */

std::map<std::string, Variable*> variables_table;       /* Symbols table */
%}

%token begin_token end_token true_token false_token begin_text_token end_text_token if_token endif_token for_token in_token endfor_token
%token <str_type> id_token string_token
%token <num_type> num_token

%type <var_type> Var ComplexVar
%type <array_type> Array
%type <object_type> ObjectArray
%type <pair_type> ObjectStatement
%type <state_type> Code Statement TextStatement Block
%type <statements_type> BlockArray StatementArray TextStatementArray

%union {
    Variable* var_type;
    Statement* state_type;
    std::vector<Variable*>* array_type;
    std::vector<Statement*>* statements_type;
    std::map<std::string, Variable*>* object_type; 
    std::pair<std::string, Variable*>* pair_type;
    std::string* str_type;
    float num_type;
}

%%

Program: Code {
    $1->run();
    
    if ((yyout = fopen(output_name, "w")) == NULL)
        yyerror(Color::set_red("Opening output file failed."));
    
    /* Deleting linked empty lines */
    auto it = file_text.begin();
    for(unsigned i = 0; i < file_text.size(); i++)
    {
        if (i == file_text.size() -1)
            break;
            
        if (file_text[i] == "\n" && file_text[i+1] == "\n")
            file_text.erase(it + i);
    }
        
    for(auto line : file_text)
        fprintf(yyout, "%s", line.c_str());
}
;

Code: BlockArray {
    $$ = new Block(*$1);
    
    delete $1;
}
;

BlockArray: BlockArray Block {
    $$ = $1;
    $$->push_back($2);
}
| Block {
    $$ = new std::vector<Statement*>();
    $$->push_back($1);
}
;

Block: begin_token StatementArray end_token {
    $$ = new Block(*$2);
    
    delete $2;
}
| begin_text_token TextStatement end_text_token {
    std::vector<Statement*>* s = new std::vector<Statement*>();
    s->push_back($2);
    $$ = new Block(*s);
} 
| begin_text_token if_token id_token end_text_token TextStatementArray begin_text_token endif_token end_text_token {
    $$ = new IfStatement(*$3, *$5, text_line_counter, buffer_file_text);
    
    delete $3;
    delete $5;
}
| begin_text_token for_token id_token in_token id_token end_text_token TextStatementArray begin_text_token endfor_token end_text_token {
    $$ = new ForStatement(*$3, *$5, *$7, text_line_counter, buffer_file_text);
    
    delete $3;
    delete $5;
    delete $7;
}
;

TextStatementArray: TextStatementArray begin_text_token TextStatement end_text_token {
    $$ = $1;
    $$->push_back($3);
}
| begin_text_token TextStatement end_text_token {
    $$ = new std::vector<Statement*>();
    $$->push_back($2);
}
;

TextStatement: id_token '.' id_token {
    ObjectTextStatement* o = new ObjectTextStatement(*$1, *$3);
    
    if (active)      /* If flag is activated, if/for buffer line informations are remembered */
    {
        o->set_line_number(buffer_text_line_counter);
        o->set_character_place(buffer_line_characters_counter);
    }
    else 
    {
        o->set_line_number(text_line_counter);
        o->set_character_place(line_characters_counter);
    }
    
    $$ = o;
    delete $1;
    delete $3;
}
| id_token '[' num_token ']' {
    float v = $3;
    if (v != (int)v)
        std::cout << "Line" + std::to_string(line_counter) +  ":Warning - for index in array float given, rounding to integer." << std::endl;
    
    ArrayTextStatement* a = new ArrayTextStatement(*$1, (int)v);
    
    if (active)      /* If flag is activated, if/for buffer line informations are remembered */
    {
        a->set_line_number(buffer_text_line_counter);
        a->set_character_place(buffer_line_characters_counter);
    }
    else 
    {
        a->set_line_number(text_line_counter);
        a->set_character_place(line_characters_counter);
    }
    
    $$ = a;
    delete $1;
}
| id_token {
    VarTextStatement* v = new VarTextStatement(*$1);
    
   if (active)       /* If flag is activated, if/for buffer line informations are remembered */
    {
        v->set_line_number(buffer_text_line_counter);
        v->set_character_place(buffer_line_characters_counter);
    }
    else 
    {
        v->set_line_number(text_line_counter);
        v->set_character_place(line_characters_counter);
    }
    
    $$ = v;
    delete $1;
}
;

StatementArray: StatementArray Statement ';'{
    $$ = $1;
    $$->push_back($2);
}
| Statement ';' {
    $$ = new std::vector<Statement*>();
    $$->push_back($1);
}
;

Statement: id_token '=' Var {
    $$ = new Assignment(*$1, $3);
    
    delete $1;
}
| id_token '=' ComplexVar {
    $$ = new Assignment(*$1, $3);
    
    delete $1;
}
;

Var: string_token {
    $$ = new String(*$1);
    
    delete $1;
}
| num_token {
    $$ = new Number($1);
}
| true_token {
    $$ = new Boolean(true);
}
| false_token {
    $$ = new Boolean(false);
}
;

ComplexVar :'{' ObjectArray '}' {
    $$ = new Object(*$2);
    
    delete $2;
}
| '[' Array ']' {
    $$ = new Array(*$2);
    
    delete $2;
}
;

Array: Array ',' Var {
    $$ = $1;
    $$->push_back($3);
}
| Var {
    $$ = new std::vector<Variable*>();
    $$->push_back($1);
}
;

ObjectArray: ObjectStatement ',' ObjectArray {
    $3->insert(*$1);
    $$ = $3;

    delete $1;
}
| ObjectStatement {
    $$ = new std::map<std::string, Variable*>();
    $$->insert(*$1);

    delete $1;
}
;

ObjectStatement: id_token ':' Var {
    $$ = new std::pair<std::string, Variable*>(*$1, $3);

    delete $1;
}
;

%%

/* Program must be called with input and output filenames. */
/* Errors with command line and opening files are colored in red :) */
int main(int argc, char** argv)
{
    if (argc < 3)
        yyerror(Color::set_red("Input or output filename missing."));

    if ((yyin = fopen(argv[1], "r")) == NULL)
        yyerror(Color::set_red("Opening input file failed."));

    output_name = argv[2];
    
    yyparse();

    fclose(yyin);
    fclose(yyout);
    return 0;
}
