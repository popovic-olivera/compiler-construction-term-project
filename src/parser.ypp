%{
#include <iostream>
#include <string>
#include <map>
#include "src/variables.hpp"

#define YYDEBUG 1

void yyerror(std::string message) {
    std::cerr << message << std::endl;
    exit(EXIT_FAILURE);
}

extern int yylex();
extern int line_counter;

std::map<std::string, Variable*> variables_table;
std::map<std::string, Object*> objects_table;
%}

%token begin_token end_token true_token false_token comment_token
%token <str_type> id_token string_token
%token <num_type> num_token

%union {
    std::string* str_type;
    float num_type;
}

%%

Program: Block {

}
;

Block: begin_token StatementArray end_token {

}
;

StatementArray: StatementArray Statement ';'{

}
| StatementArray comment_token {

}
| Statement ';' {
    
}
| comment_token {

} 
;

Statement: id_token '=' E {

}
;

E: string_token {

}
| num_token {

}
| true_token {

}
| false_token {

}
| '{' ObjectArray '}' {

}
| '[' Array ']' {

}
;

Array: Array ',' E {

}
| E {

}
;

ObjectArray: ObjectStatement ',' ObjectArray {

}
| ObjectStatement comment_token {

}
| comment_token ObjectArray {

}
| ObjectStatement {

}
| comment_token {
    
}
;

ObjectStatement: id_token ':' E {

}
;

%%

extern FILE* yyout;
extern FILE* yyin;

/* Program must be called with input and output filenames. */
int main(int argc, char** argv)
{
    // yydebug = 1;

    if(argc < 3)
        yyerror("Input or output filename missing.");

    if((yyin = fopen(argv[1], "r")) == NULL)
        yyerror("Opening input file failed.");

    if((yyout = fopen(argv[2], "w")) == NULL)
        yyerror("Opening output file failed.");
    
    yyparse();

    return 0;
}