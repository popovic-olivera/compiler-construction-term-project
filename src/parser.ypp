%{
#include <iostream>
#include <string>
#include <map>
#include "src/variables.hpp"
#include "src/statement.hpp"

extern FILE* yyout;
extern FILE* yyin;

void yyerror(std::string message) {
    std::cerr << message << std::endl;
    exit(EXIT_FAILURE);
}

extern int yylex();
extern int line_counter;
extern int text_counter;
extern int line_characters_counter;
extern std::vector<std::string> file_text;
extern std::map<int, int> added;

std::map<std::string, Variable*> variables_table;
%}

%token begin_token end_token true_token false_token begin_text_token end_text_token for_token in_token if_token
%token <str_type> id_token string_token
%token <num_type> num_token
%token <int_type> int_num_token

%type <var_type> E F
%type <array_type> Array
%type <object_type> ObjectArray
%type <pair_type> ObjectStatement
%type <state_type> Code Statement TextStatement Block
%type <statements_type> StatementArray

%union {
    Variable* var_type;
    Statement* state_type;
    std::vector<Variable*>* array_type;
    std::vector<Statement*>* statements_type;
    std::map<std::string, Variable*>* object_type; 
    std::pair<std::string, Variable*>* pair_type;
    std::string* str_type;
    float num_type;
    int int_type;
}

%%

Program: Code {
    $1->run();
    
    for(auto line : file_text)
        fprintf(yyout, "%s", line.c_str());
}
;

Code: StatementArray {
    $$ = new Block(*$1);
    
    delete $1;
}
;

StatementArray: StatementArray Statement ';'{
    $$ = $1;
    $$->push_back($2);
}
| StatementArray Block {
    $$ = $1;
    $$->push_back($2);
}
| Statement ';' {
    $$ = new std::vector<Statement*>();
    $$->push_back($1);
}
| Block {
    $$ = new std::vector<Statement*>();
    $$->push_back($1);
}
;

Statement: id_token '=' E {
    $$ = new Assignment(*$1, $3);
    
    delete $1;
}
| id_token '=' F {
    $$ = new Assignment(*$1, $3);
    
    delete $1;
}
;

Block: begin_token StatementArray end_token {
    $$ = new Block(*$2);
    
    delete $2;
}
| begin_text_token TextStatement end_text_token {
    $$ = $2;
}
;

TextStatement: id_token '.' id_token {
    ObjectTextStatement* o = new ObjectTextStatement(*$1, *$3);
    
    o->set_line_number(text_counter);
    o->set_character_place(line_characters_counter);
    
    $$ = o;
    delete $1;
    delete $3;
}
| id_token '[' int_num_token ']' {
    ArrayTextStatement* a = new ArrayTextStatement(*$1, $3);
    
    a->set_line_number(text_counter);
    a->set_character_place(line_characters_counter);
    
    $$ = a;
    delete $1;
}
| id_token {
    VarTextStatement* v = new VarTextStatement(*$1);
    
    v->set_line_number(text_counter);
    v->set_character_place(line_characters_counter);
    
    $$ = v;
    delete $1;
}
;

E: string_token {
    $$ = new String(*$1);
    
    delete $1;
}
| num_token {
    $$ = new Number($1);
}
| true_token {
    $$ = new Boolean(true);
}
| false_token {
    $$ = new Boolean(false);
}
;

F :'{' ObjectArray '}' {
    $$ = new Object(*$2);
    
    delete $2;
}
| '[' Array ']' {
    $$ = new Array(*$2);
    
    delete $2;
}
;

Array: Array ',' E {
    $$ = $1;
    $$->push_back($3);
}
| E {
    $$ = new std::vector<Variable*>();
    $$->push_back($1);
}
;

ObjectArray: ObjectStatement ',' ObjectArray {
    $3->insert(*$1);
    $$ = $3;

    delete $1;
}
| ObjectStatement {
    $$ = new std::map<std::string, Variable*>();
    $$->insert(*$1);

    delete $1;
}
;

ObjectStatement: id_token ':' E {
    $$ = new std::pair<std::string, Variable*>(*$1, $3);

    delete $1;
}
;

%%

/* Program must be called with input and output filenames. */
int main(int argc, char** argv)
{
    if(argc < 3)
        yyerror("Input or output filename missing.");

    if((yyin = fopen(argv[1], "r")) == NULL)
        yyerror("Opening input file failed.");

    if((yyout = fopen(argv[2], "w")) == NULL)
        yyerror("Opening output file failed.");
    
    yyparse();

    return 0;
}
